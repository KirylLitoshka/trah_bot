from aiogram import Bot, Dispatcher, types

menu = {
    "gender": {
        "male": "üíÅ‚Äç‚ôÇÔ∏è –ü–∞—Ä–Ω–∏",
        "female": "üíÅ‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∏"
    },
    "picture_type": {
        "real": "üíã –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ 2D –∞—Ä—Ç—ã",
        "photo": "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        "anime": "üç≠ –ê–Ω–∏–º–µ 2D –∞—Ä—Ç—ã"
    },
    "novels": {
        "female": {
            "real": "https://t.me/denise_el_patrona_bot",
            "photo": "https://t.me/bruna_el_patrona_bot",
            "anime": "https://t.me/TestCucumber2Bot"
        },
        "male": {
            "real": "https://t.me/danielle_el_patrona_bot",
            "photo": "https://t.me/danielle_el_patrona_bot",
            "anime": "https://t.me/danielle_el_patrona_bot"
        }
    }
}


async def create_new_user(user_id, users_storage):
    users_storage[str(user_id)] = {
        "gender": None,
        "picture_type": None,
        "current_choices": "gender"
    }


async def gender_selection(message: types.Message):
    users = Dispatcher.get_current().data["users"]
    if message.from_user.id not in users:
        await create_new_user(message.from_user.id, users)
    await message.answer(
        text="–° –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –¥–∏–∞–ª–æ–≥?",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton("üíÅ‚Äç‚ôÇÔ∏è –ü–∞—Ä–Ω–∏")],
                [types.KeyboardButton("üíÅ‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∏")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )


async def picture_type_selection(message: types.Message):
    users = Dispatcher.get_current().data["users"]
    user_id = str(message.from_user.id)
    if message.text not in menu[users[user_id]["current_choices"]].values():
        await Bot.get_current().delete_message(message.chat.id, message.message_id)
    users[user_id]["gender"] = next(
        (key for key, val in menu["gender"].items() if val == message.text), None)
    users[user_id]["current_choices"] = "picture_type"
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏.\n\n"
             "<i>–í –Ω–∞—à–∏—Ö –∏—Å—Ç–æ—Ä–∏—è—Ö –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∞—Ä—Ç—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ üîû</i>",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton("üíã –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ 2D –∞—Ä—Ç—ã")],
                [types.KeyboardButton("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")],
                [types.KeyboardButton("üç≠ –ê–Ω–∏–º–µ 2D –∞—Ä—Ç—ã")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )


async def novel_selection(message: types.Message):
    users = Dispatcher.get_current().data["users"]
    user_id = str(message.from_user.id)
    current_user = users[user_id]
    if message.text not in menu[users[user_id]["current_choices"]].values():
        await Bot.get_current().delete_message(message.chat.id, message.message_id)
    current_user["picture_type"] = next(
        (key for key, val in menu["picture_type"].items() if val == message.text), None)
    current_user["current_choices"] = "novels"
    novel_link = menu["novels"][current_user["gender"]
                                ][current_user["picture_type"]]
    await message.answer(
        text="–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è –≤ —á–∞—Ç–µ.\n–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ", url=novel_link))
    )


async def restart(message: types.Message):
    users = Dispatcher.get_current().data["users"]
    try:
        del users[str(message.from_user.id)]
        await gender_selection(message)
    except KeyError:
        await gender_selection(message)
